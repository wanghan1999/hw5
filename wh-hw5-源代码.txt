源代码
1.butterworth低通滤波器
function butterworth_lp(imgpath)
A=imread(imgpath);
B=double(A);
B=fft2(B);
B=fftshift(B);
[x,y]=size(B);
n=2;  %阶数
D0=60;
power_B=0;
power_G=0;
for u=1:x  %频域布特沃斯低通滤波
    for v=1:y
        D(u,v)=sqrt((u-fix(x/2))^2+(v-fix(y/2))^2);
        H(u,v)=1/(1+(D(u,v)/D0)^(2*n));
        G(u,v)=H(u,v)*B(u,v);
        power_b=(abs(B(u,v)))^2;
        power_B=power_B+power_b;
        power_g=(abs(G(u,v)))^2;
        power_G=power_G+power_g;
    end
end
g=ifftshift(G);
g=ifft2(g);
g=uint8(real(g));  %取傅里叶反变换后的数据实部
B=log(abs(B)+1);
G=log(abs(G)+1);
figure(1);
imshow(A);title('原图像');
figure(2);
imshow(B,[]);title('原图像频谱');
figure(3);
imshow(g);title('butterworth低通滤波器（D0=60，n=2）');
figure(4);
imshow(G,[]);title('butterworth_lp频谱');
power_spectral_ratio=power_G/power_B;
fprintf('power_spectral_ratio=%f\n',power_spectral_ratio);
end


2.gaussian低通滤波器
function gaussian_lp(imgpath)
A=imread(imgpath);
B=double(A);
B=fft2(B);
B=fftshift(B);
[x,y]=size(B);
D0=60;
power_B=0;
power_G=0;
for u=1:x  %频域高斯低通滤波
    for v=1:y
        D(u,v)=sqrt((u-fix(x/2))^2+(v-fix(y/2))^2);
        H(u,v)=exp(-D(u,v)^2/(2*D0^2));
        G(u,v)=H(u,v)*B(u,v);
        power_b=(abs(B(u,v)))^2;
        power_B=power_B+power_b;
        power_g=(abs(G(u,v)))^2;
        power_G=power_G+power_g;
    end
end
g=ifftshift(G);
g=ifft2(g);
g=uint8(real(g));  %取傅里叶反变换后的数据实部
B=log(abs(B)+1);
G=log(abs(G)+1);
figure(1);
imshow(A);title('原图像');
figure(2);
imshow(B,[]);title('原图像频谱');
figure(3);
imshow(g);title('gaussian低通滤波器（D0=60）');
figure(4);
imshow(G,[]);title('gaussian_lp频谱');
power_spectral_ratio=power_G/power_B;
fprintf('power_spectral_ratio=%f\n',power_spectral_ratio);
end


3.butterworth高通滤波器
function butterworth_hp(imgpath)
A=imread(imgpath);
B=double(A);
B=fft2(B);
B=fftshift(B);
[x,y]=size(B);
n=2;  %阶数
D0=30;
power_B=0;
power_G=0;
for u=1:x  %频域布特沃斯高通滤波
    for v=1:y
        D(u,v)=sqrt((u-fix(x/2))^2+(v-fix(y/2))^2);
        H(u,v)=1/(1+(D0/D(u,v))^(2*n));
        G(u,v)=H(u,v)*B(u,v);
        power_b=(abs(B(u,v)))^2;
        power_B=power_B+power_b;
        power_g=(abs(G(u,v)))^2;
        power_G=power_G+power_g;
    end
end
g=ifftshift(G);
g=ifft2(g);
g=uint8(real(g));  %取傅里叶反变换后的数据实部
B=log(abs(B)+1);
G=log(abs(G)+1);
figure(1);
imshow(A);title('原图像');
figure(2);
imshow(B,[]);title('原图像频谱');
figure(3);
imshow(g);title('butterworth高通滤波器（D0=30，n=2）');
figure(4);
imshow(G,[]);title('butterworth_hp频谱');
power_spectral_ratio=power_G/power_B;
fprintf('power_spectral_ratio=%f\n',power_spectral_ratio);
end


4.gaussian高通滤波器
function gaussian_hp(imgpath)
A=imread(imgpath);
B=double(A);
B=fft2(B);
B=fftshift(B);
[x,y]=size(B);
D0=30;
power_B=0;
power_G=0;
for u=1:x  %频域高斯高通滤波
    for v=1:y
        D(u,v)=sqrt((u-fix(x/2))^2+(v-fix(y/2))^2);
        H(u,v)=1-exp(-D(u,v)^2/(2*D0^2));
        G(u,v)=H(u,v)*B(u,v);
        power_b=(abs(B(u,v)))^2;
        power_B=power_B+power_b;
        power_g=(abs(G(u,v)))^2;
        power_G=power_G+power_g;
    end
end
g=ifftshift(G);
g=ifft2(g);
g=uint8(real(g));  %取傅里叶反变换后的数据实部
B=log(abs(B)+1);
G=log(abs(G)+1);
figure(1);
imshow(A);title('原图像');
figure(2);
imshow(B,[]);title('原图像频谱');
figure(3);
imshow(g);title('gaussian高通滤波器（D0=30）');
figure(4);
imshow(G,[]);title('gaussian_hp频谱');
power_spectral_ratio=power_G/power_B;
fprintf('power_spectral_ratio=%f\n',power_spectral_ratio);
end


5.laplace高通滤波器
function laplace_hp(imgpath)
f=imread(imgpath);
ff=double(f);
F=fft2(ff);
F=fftshift(F);
[x,y]=size(F);
for u=1:x  %拉普拉斯算子
    for v=1:y
        D(u,v)=sqrt((u-fix(x/2))^2+(v-fix(y/2))^2);
        G(u,v)=(1+4*(pi^2)*(D(u,v)^2))*F(u,v);
    end
end
g=ifftshift(G);
g=ifft2(g);
g=uint8(real(g));  %取傅里叶反变换后的数据实部
F=log(abs(F)+1);
G=log(abs(G)+1);
figure(1);
imshow(f);title('原图像');
figure(2);
imshow(F,[]);title('原图像频谱');
figure(3);
imshow(g);title('laplace');
figure(4);
imshow(G,[]);title('laplace频谱');
end


6.unmask高通滤波器
function unmask_hp(imgpath)
f=imread(imgpath);
ff=double(f);
F=fft2(ff);
F=fftshift(F);
[x,y]=size(F);
D0=30;
k1=0.5;
k2=0.75;
for u=1:x  %unmask高频强调滤波器
    for v=1:y
        D(u,v)=sqrt((u-fix(x/2))^2+(v-fix(y/2))^2);
        H(u,v)=1-exp(-D(u,v)^2/(2*D0^2));
        G(u,v)=(k1+k2*H(u,v))*F(u,v);
    end
end
g=ifftshift(G);
g=ifft2(g);
g=uint8(real(g));  %取傅里叶反变换后的数据实部
F=log(abs(F)+1);
G=log(abs(G)+1);
figure(1);
imshow(f);title('原图像');
figure(2);
imshow(F,[]);title('原图像频谱');
figure(3);
imshow(g);title('unmask(k1=0.5  k2=0.75)');
figure(4);
imshow(G,[]);title('unmask频谱');
end
